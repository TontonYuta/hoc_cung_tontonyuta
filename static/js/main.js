// Bi·∫øn to√†n c·ª•c
let currentQuiz = 0;
let correctCount = 0;
let answeredCount = 0;
let currentQuizSet = [];
let currentSnippet = "";

// Kh·ªüi t·∫°o khi t·∫£i trang
document.addEventListener("DOMContentLoaded", () => {
  // Navbar
  const toggleBtn = document.querySelector(".menu-toggle");
  const navLinks = document.getElementById("navLinks");
  toggleBtn.addEventListener("click", () => {
    navLinks.classList.toggle("show");
    toggleBtn.classList.toggle("active");
  });
  toggleBtn.addEventListener("keydown", (e) => {
    if (e.key === "Enter" || e.key === " ") {
      e.preventDefault();
      navLinks.classList.toggle("show");
      toggleBtn.classList.toggle("active");
    }
  });

const bg = document.getElementById("bgMusic");
const toggleMusicBtn = document.getElementById("toggleMusicBtn");
const volumeSlider = document.getElementById("volumeSlider");

// L·∫•y √¢m l∆∞·ª£ng t·ª´ localStorage
const savedVolume = parseFloat(localStorage.getItem("musicVolume")) || 0.3;
bg.volume = savedVolume;
if (volumeSlider) volumeSlider.value = savedVolume;

// Ki·ªÉm tra tr·∫°ng th√°i b·∫≠t/t·∫Øt
const isMusicPlaying = localStorage.getItem("musicPlaying") === "true";
if (isMusicPlaying) {
  toggleMusicBtn.textContent = "üîä T·∫Øt nh·∫°c";
  bg.play().catch(err => console.log("üéµ Kh√¥ng autoplay ƒë∆∞·ª£c:", err));
} else {
  toggleMusicBtn.textContent = "üéµ B·∫≠t nh·∫°c";
}

// N√∫t toggle
toggleMusicBtn.addEventListener("click", () => {
  if (bg.paused) {
    bg.play().catch(err => console.log("üéµ Kh√¥ng ph√°t ƒë∆∞·ª£c:", err));
    toggleMusicBtn.textContent = "üîä T·∫Øt nh·∫°c";
    localStorage.setItem("musicPlaying", "true");
  } else {
    bg.pause();
    toggleMusicBtn.textContent = "üéµ B·∫≠t nh·∫°c";
    localStorage.setItem("musicPlaying", "false");
  }
});

// B·∫•m Enter ho·∫∑c Space ƒë·ªÉ toggle
toggleMusicBtn.addEventListener("keydown", (e) => {
  if (e.key === "Enter" || e.key === " ") {
    e.preventDefault();
    toggleMusicBtn.click();
  }
});

// Slider ch·ªânh √¢m l∆∞·ª£ng
if (volumeSlider) {
  volumeSlider.addEventListener("input", () => {
    bg.volume = volumeSlider.value;
    localStorage.setItem("musicVolume", volumeSlider.value);
  });
}

// Click ƒë·∫ßu ti√™n (browser unlock autoplay)
document.addEventListener("click", () => {
  if (bg.paused && localStorage.getItem("musicPlaying") === "true") {
    bg.play().catch(err => console.log("üéµ Kh√¥ng autoplay ƒë∆∞·ª£c:", err));
  }
}, { once: true });


  // Load tr·∫°ng th√°i quiz
  loadQuizState();
});

// Hi·ªÉn th·ªã snippet + g·∫Øn quiz
function showSnippet(type) {
  const box = document.getElementById("snippetBox");
  currentQuiz = 0;
  correctCount = 0;
  answeredCount = 0;
  try {
    switch (type) {
      case "logarit":
        if (!snippets_logarit || !quiz_logarit) throw new Error("D·ªØ li·ªáu Logarit kh√¥ng t·ªìn t·∫°i");
        currentSnippet = snippets_logarit;
        currentQuizSet = quiz_logarit;
        break;
      case "daoham":
        if (!snippets_daoham || !quiz_daoham) throw new Error("D·ªØ li·ªáu ƒê·∫°o h√†m kh√¥ng t·ªìn t·∫°i");
        currentSnippet = snippets_daoham;
        currentQuizSet = quiz_daoham;
        break;
      case "hamso_dondon":
        if (!snippets_hamso_dondon || !quiz_hamso_dondon) throw new Error("D·ªØ li·ªáu T√≠nh ƒë∆°n ƒëi·ªáu kh√¥ng t·ªìn t·∫°i");
        currentSnippet = snippets_hamso_dondon;
        currentQuizSet = quiz_hamso_dondon;
        break;
      case "hamso_cuctri":
        if (!snippets_hamso_cuctri || !quiz_hamso_cuctri) throw new Error("D·ªØ li·ªáu C·ª±c tr·ªã kh√¥ng t·ªìn t·∫°i");
        currentSnippet = snippets_hamso_cuctri;
        currentQuizSet = quiz_hamso_cuctri;
        break;
      case "hamso_gtln":
        if (!snippets_hamso_gtln || !quiz_hamso_gtln) throw new Error("D·ªØ li·ªáu GTLN-GTNN kh√¥ng t·ªìn t·∫°i");
        currentSnippet = snippets_hamso_gtln;
        currentQuizSet = quiz_hamso_gtln;
        break;
      case "hamso_tiemcan":
        if (!snippets_hamso_tiemcan || !quiz_hamso_tiemcan) throw new Error("D·ªØ li·ªáu Ti·ªám c·∫≠n kh√¥ng t·ªìn t·∫°i");
        currentSnippet = snippets_hamso_tiemcan;
        currentQuizSet = quiz_hamso_tiemcan;
        break;
      case "hamso_nhandien":
        if (!snippets_hamso_nhandien || !quiz_hamso_nhandien) throw new Error("D·ªØ li·ªáu Nh·∫≠n di·ªán h√†m s·ªë kh√¥ng t·ªìn t·∫°i");
        currentSnippet = snippets_hamso_nhandien;
        currentQuizSet = quiz_hamso_nhandien;
        break;
      case "hamso_tuonggiao":
        if (!snippets_hamso_tuonggiao || !quiz_hamso_tuonggiao) throw new Error("D·ªØ li·ªáu T∆∞∆°ng giao ƒë·ªì th·ªã kh√¥ng t·ªìn t·∫°i");
        currentSnippet = snippets_hamso_tuonggiao;
        currentQuizSet = quiz_hamso_tuonggiao;
        break;
      case "hamso_ungdung":
        if (!snippets_hamso_ungdung || !quiz_hamso_ungdung) throw new Error("D·ªØ li·ªáu ·ª®ng d·ª•ng th·ª±c t·∫ø kh√¥ng t·ªìn t·∫°i");
        currentSnippet = snippets_hamso_ungdung;
        currentQuizSet = quiz_hamso_ungdung;
        break;
      case "xacsuatCoDien":
        if (!snippets_xacsuatCoDien || !quiz_xacsuatCoDien) throw new Error("D·ªØ li·ªáu X√°c su·∫•t c·ªï ƒëi·ªÉn kh√¥ng t·ªìn t·∫°i");
        currentSnippet = snippets_xacsuatCoDien;
        currentQuizSet = quiz_xacsuatCoDien;
        break;
      case "thongke":
        if (!snippets_thongke || !quiz_thongke) throw new Error("D·ªØ li·ªáu Th·ªëng k√™ kh√¥ng t·ªìn t·∫°i");
        currentSnippet = snippets_thongke;
        currentQuizSet = quiz_thongke;
        break;
      case "tichphan":
        if (!snippets_tichphan || !quiz_tichphan) throw new Error("D·ªØ li·ªáu T√≠ch ph√¢n kh√¥ng t·ªìn t·∫°i");
        currentSnippet = snippets_tichphan;
        currentQuizSet = quiz_tichphan;
        break;
      case "vecto":
        if (!snippets_vecto || !quiz_vecto) throw new Error("D·ªØ li·ªáu Vecto kh√¥ng t·ªìn t·∫°i");
        currentSnippet = snippets_vecto;
        currentQuizSet = quiz_vecto;
        break;
      case "heOxyz":
        if (!snippets_heOxyz || !quiz_heOxyz) throw new Error("D·ªØ li·ªáu H·ªá Oxyz kh√¥ng t·ªìn t·∫°i");
        currentSnippet = snippets_heOxyz;
        currentQuizSet = quiz_heOxyz;
        break;
      case "xacsuatDK":
        if (!snippets_xacsuatDK || !quiz_xacsuatDK) throw new Error("D·ªØ li·ªáu X√°c su·∫•t c√≥ ƒêK kh√¥ng t·ªìn t·∫°i");
        currentSnippet = snippets_xacsuatDK;
        currentQuizSet = quiz_xacsuatDK;
        break;

  case "logarit_coban":
    if (!snippets_logarit_coban || !quiz_logarit_coban) throw new Error("D·ªØ li·ªáu Logarit c∆° b·∫£n kh√¥ng t·ªìn t·∫°i");
    currentSnippet = snippets_logarit_coban;
    currentQuizSet = quiz_logarit_coban;
    break;
  case "logarit_pt":
    if (!snippets_logarit_pt || !quiz_logarit_pt) throw new Error("D·ªØ li·ªáu Ph∆∞∆°ng tr√¨nh logarit kh√¥ng t·ªìn t·∫°i");
    currentSnippet = snippets_logarit_pt;
    currentQuizSet = quiz_logarit_pt;
    break;
  case "logarit_bt":
    if (!snippets_logarit_bt || !quiz_logarit_bt) throw new Error("D·ªØ li·ªáu B·∫•t ph∆∞∆°ng tr√¨nh logarit kh√¥ng t·ªìn t·∫°i");
    currentSnippet = snippets_logarit_bt;
    currentQuizSet = quiz_logarit_bt;
    break;

  // ƒê·∫†O H√ÄM
  case "daoham_dinhnghia":
    if (!snippets_daoham_dinhnghia || !quiz_daoham_dinhnghia) throw new Error("D·ªØ li·ªáu ƒê·ªãnh nghƒ©a ƒë·∫°o h√†m kh√¥ng t·ªìn t·∫°i");
    currentSnippet = snippets_daoham_dinhnghia;
    currentQuizSet = quiz_daoham_dinhnghia;
    break;
  case "daoham_quytac":
    if (!snippets_daoham_quytac || !quiz_daoham_quytac) throw new Error("D·ªØ li·ªáu Quy t·∫Øc ƒë·∫°o h√†m kh√¥ng t·ªìn t·∫°i");
    currentSnippet = snippets_daoham_quytac;
    currentQuizSet = quiz_daoham_quytac;
    break;
  case "daoham_ungdung":
    if (!snippets_daoham_ungdung || !quiz_daoham_ungdung) throw new Error("D·ªØ li·ªáu ·ª®ng d·ª•ng ƒë·∫°o h√†m kh√¥ng t·ªìn t·∫°i");
    currentSnippet = snippets_daoham_ungdung;
    currentQuizSet = quiz_daoham_ungdung;
    break;

  // H√ÄM S·ªê (gi·ªØ nguy√™n nh∆∞ b·∫°n ƒëang c√≥: dondon, cuctri, gtln, tiemcan, nhandien, tuonggiao, ungdung)

  // TH·ªêNG K√ä
      case "tk_p1":
        if (!snippets_tk_p1 || !quiz_tk_p1) {
          throw new Error("D·ªØ li·ªáu Th·ªëng k√™ P1 kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_tk_p1;
        currentQuizSet = quiz_tk_p1;
        break;

      case "tk_p2":
        if (!snippets_tk_p2 || !quiz_tk_p2) {
          throw new Error("D·ªØ li·ªáu Th·ªëng k√™ P2 kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_tk_p2;
        currentQuizSet = quiz_tk_p2;
        break;

      case "tk_p3":
        if (!snippets_tk_p3 || !quiz_tk_p3) {
          throw new Error("D·ªØ li·ªáu Th·ªëng k√™ P3 kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_tk_p3;
        currentQuizSet = quiz_tk_p3;
        break;

  // T√çCH PH√ÇN
  case "tp_nguyenham":
    if (!snippets_tp_nguyenham || !quiz_tp_nguyenham) throw new Error("D·ªØ li·ªáu Nguy√™n h√†m kh√¥ng t·ªìn t·∫°i");
    currentSnippet = snippets_tp_nguyenham;
    currentQuizSet = quiz_tp_nguyenham;
    break;
  case "tp_quytac":
    if (!snippets_tp_quytac || !quiz_tp_quytac) throw new Error("D·ªØ li·ªáu Quy t·∫Øc t√≠ch ph√¢n kh√¥ng t·ªìn t·∫°i");
    currentSnippet = snippets_tp_quytac;
    currentQuizSet = quiz_tp_quytac;
    break;
  case "tp_ungdung":
    if (!snippets_tp_ungdung || !quiz_tp_ungdung) throw new Error("D·ªØ li·ªáu ·ª®ng d·ª•ng t√≠ch ph√¢n kh√¥ng t·ªìn t·∫°i");
    currentSnippet = snippets_tp_ungdung;
    currentQuizSet = quiz_tp_ungdung;
    break;

  // VECTO
      case "vt_coban":
        if (!snippets_vt_coban || !quiz_vt_coban) {
          throw new Error("D·ªØ li·ªáu Vecto c∆° b·∫£n kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_vt_coban;
        currentQuizSet = quiz_vt_coban;
        break;

      case "vt_tich":
        if (!snippets_vt_tich || !quiz_vt_tich) {
          throw new Error("D·ªØ li·ªáu Vecto t√≠ch kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_vt_tich;
        currentQuizSet = quiz_vt_tich;
        break;

      case "vt_ungdung":
        if (!snippets_vt_ungdung || !quiz_vt_ungdung) {
          throw new Error("D·ªØ li·ªáu Vecto ·ª©ng d·ª•ng kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_vt_ungdung;
        currentQuizSet = quiz_vt_ungdung;
        break;


  // H·ªÜ OXYZ
      case "oxyz_cau":
        if (!snippets_oxyz_cau || !quiz_oxyz_cau) {
          throw new Error("D·ªØ li·ªáu M·∫∑t c·∫ßu kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_oxyz_cau;
        currentQuizSet = quiz_oxyz_cau;
        break;

      case "oxyz_mt":
        if (!snippets_oxyz_mt || !quiz_oxyz_mt) {
          throw new Error("D·ªØ li·ªáu M·∫∑t ph·∫≥ng kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_oxyz_mt;
        currentQuizSet = quiz_oxyz_mt;
        break;

      case "oxyz_dt":
        if (!snippets_oxyz_dt || !quiz_oxyz_dt) {
          throw new Error("D·ªØ li·ªáu ƒê∆∞·ªùng th·∫≥ng kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_oxyz_dt;
        currentQuizSet = quiz_oxyz_dt;
        break;

      case "oxyz_goc":
        if (!snippets_oxyz_goc || !quiz_oxyz_goc) {
          throw new Error("D·ªØ li·ªáu G√≥c trong kh√¥ng gian kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_oxyz_goc;
        currentQuizSet = quiz_oxyz_goc;
        break;

      case "xs_codiem":
        if (!snippets_xs_codiem || !quiz_xs_codiem) {
          throw new Error("D·ªØ li·ªáu X√°c su·∫•t c·ªï ƒëi·ªÉn kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_xs_codiem;
        currentQuizSet = quiz_xs_codiem;
        break;

      case "xs_codk":
        if (!snippets_xs_codk || !quiz_xs_codk) {
          throw new Error("D·ªØ li·ªáu X√°c su·∫•t c√≥ ƒëi·ªÅu ki·ªán kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_xs_codk;
        currentQuizSet = quiz_xs_codk;
        break;

      case "xs_bayes":
        if (!snippets_xs_bayes || !quiz_xs_bayes) {
          throw new Error("D·ªØ li·ªáu Bi·∫øn c·ªë kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_xs_bayes;
        currentQuizSet = quiz_xs_bayes;
        break;

      // ==========================
      // SAT Math
      // ==========================
      case "sat_math_algebra1":
        if (!snippets_sat_math_algebra1 || !quiz_sat_math_algebra1) {
          throw new Error("D·ªØ li·ªáu SAT Math ‚Äì Algebra 1 kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_sat_math_algebra1;
        currentQuizSet = quiz_sat_math_algebra1;
        break;

      case "sat_math_algebra2":
        if (!snippets_sat_math_algebra2 || !quiz_sat_math_algebra2) {
          throw new Error("D·ªØ li·ªáu SAT Math ‚Äì Algebra 2 kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_sat_math_algebra2;
        currentQuizSet = quiz_sat_math_algebra2;
        break;

      case "sat_math_advanced":
        if (!snippets_sat_math_advanced || !quiz_sat_math_advanced) {
          throw new Error("D·ªØ li·ªáu SAT Math ‚Äì Advanced kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_sat_math_advanced;
        currentQuizSet = quiz_sat_math_advanced;
        break;

      case "sat_math_problem":
        if (!snippets_sat_math_problem || !quiz_sat_math_problem) {
          throw new Error("D·ªØ li·ªáu SAT Math ‚Äì Problem Solving kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_sat_math_problem;
        currentQuizSet = quiz_sat_math_problem;
        break;

      case "sat_math_data":
        if (!snippets_sat_math_data || !quiz_sat_math_data) {
          throw new Error("D·ªØ li·ªáu SAT Math ‚Äì Data kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_sat_math_data;
        currentQuizSet = quiz_sat_math_data;
        break;

      case "sat_math_geometry":
        if (!snippets_sat_math_geometry || !quiz_sat_math_geometry) {
          throw new Error("D·ªØ li·ªáu SAT Math ‚Äì Geometry kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_sat_math_geometry;
        currentQuizSet = quiz_sat_math_geometry;
        break;

      case "sat_math_trigonometry":
        if (!snippets_sat_math_trigonometry || !quiz_sat_math_trigonometry) {
          throw new Error("D·ªØ li·ªáu SAT Math ‚Äì Trigonometry kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_sat_math_trigonometry;
        currentQuizSet = quiz_sat_math_trigonometry;
        break;


      // ==========================
      // SAT Reading
      // ==========================
      case "sat_reading_vocab":
        if (!snippets_sat_reading_vocab || !quiz_sat_reading_vocab) {
          throw new Error("D·ªØ li·ªáu SAT Reading ‚Äì Vocabulary kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_sat_reading_vocab;
        currentQuizSet = quiz_sat_reading_vocab;
        break;

      case "sat_reading_passage1":
        if (!snippets_sat_reading_passage1 || !quiz_sat_reading_passage1) {
          throw new Error("D·ªØ li·ªáu SAT Reading ‚Äì Passage 1 (VƒÉn h·ªçc) kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_sat_reading_passage1;
        currentQuizSet = quiz_sat_reading_passage1;
        break;

      case "sat_reading_passage2":
        if (!snippets_sat_reading_passage2 || !quiz_sat_reading_passage2) {
          throw new Error("D·ªØ li·ªáu SAT Reading ‚Äì Passage 2 (Khoa h·ªçc x√£ h·ªôi) kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_sat_reading_passage2;
        currentQuizSet = quiz_sat_reading_passage2;
        break;

      case "sat_reading_passage3":
        if (!snippets_sat_reading_passage3 || !quiz_sat_reading_passage3) {
          throw new Error("D·ªØ li·ªáu SAT Reading ‚Äì Passage 3 (Khoa h·ªçc t·ª± nhi√™n) kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_sat_reading_passage3;
        currentQuizSet = quiz_sat_reading_passage3;
        break;

      case "sat_reading_graph":
        if (!snippets_sat_reading_graph || !quiz_sat_reading_graph) {
          throw new Error("D·ªØ li·ªáu SAT Reading ‚Äì ƒê·ªçc hi·ªÉu bi·ªÉu ƒë·ªì kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_sat_reading_graph;
        currentQuizSet = quiz_sat_reading_graph;
        break;


      // ==========================
      // SAT Writing
      // ==========================
      // ==========================
      // SAT Writing
      // ==========================
      case "sat_writing_grammar1":
        if (!snippets_sat_writing_grammar1 || !quiz_sat_writing_grammar1) {
          throw new Error("D·ªØ li·ªáu SAT Writing ‚Äì Grammar 1 (Subject & Verb) kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_sat_writing_grammar1;
        currentQuizSet = quiz_sat_writing_grammar1;
        break;

      case "sat_writing_grammar2":
        if (!snippets_sat_writing_grammar2 || !quiz_sat_writing_grammar2) {
          throw new Error("D·ªØ li·ªáu SAT Writing ‚Äì Grammar 2 (Pronoun & Modifier) kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_sat_writing_grammar2;
        currentQuizSet = quiz_sat_writing_grammar2;
        break;

      case "sat_writing_punctuation":
        if (!snippets_sat_writing_punctuation || !quiz_sat_writing_punctuation) {
          throw new Error("D·ªØ li·ªáu SAT Writing ‚Äì Punctuation kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_sat_writing_punctuation;
        currentQuizSet = quiz_sat_writing_punctuation;
        break;

      case "sat_writing_style":
        if (!snippets_sat_writing_style || !quiz_sat_writing_style) {
          throw new Error("D·ªØ li·ªáu SAT Writing ‚Äì Style & Expression kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_sat_writing_style;
        currentQuizSet = quiz_sat_writing_style;
        break;

      case "sat_writing_transition":
        if (!snippets_sat_writing_transition || !quiz_sat_writing_transition) {
          throw new Error("D·ªØ li·ªáu SAT Writing ‚Äì Transition & Logic kh√¥ng t·ªìn t·∫°i");
        }
        currentSnippet = snippets_sat_writing_transition;
        currentQuizSet = quiz_sat_writing_transition;
        break;

// ===============================
// TSA HUST ‚Äì T∆∞ duy To√°n h·ªçc
// ===============================
case "tsa_math_algebra":
  if (!snippets_tsa_math_algebra || !quiz_tsa_math_algebra) {
    throw new Error("D·ªØ li·ªáu TSA ‚Äì To√°n h·ªçc (ƒê·∫°i s·ªë & S·ªë h·ªçc) kh√¥ng t·ªìn t·∫°i");
  }
  currentSnippet = snippets_tsa_math_algebra;
  currentQuizSet = quiz_tsa_math_algebra;
  break;

case "tsa_math_function":
  if (!snippets_tsa_math_function || !quiz_tsa_math_function) {
    throw new Error("D·ªØ li·ªáu TSA ‚Äì To√°n h·ªçc (H√†m s·ªë) kh√¥ng t·ªìn t·∫°i");
  }
  currentSnippet = snippets_tsa_math_function;
  currentQuizSet = quiz_tsa_math_function;
  break;

case "tsa_math_geometry":
  if (!snippets_tsa_math_geometry || !quiz_tsa_math_geometry) {
    throw new Error("D·ªØ li·ªáu TSA ‚Äì To√°n h·ªçc (H√¨nh h·ªçc) kh√¥ng t·ªìn t·∫°i");
  }
  currentSnippet = snippets_tsa_math_geometry;
  currentQuizSet = quiz_tsa_math_geometry;
  break;

case "tsa_math_probability":
  if (!snippets_tsa_math_probability || !quiz_tsa_math_probability) {
    throw new Error("D·ªØ li·ªáu TSA ‚Äì To√°n h·ªçc (Th·ªëng k√™ & X√°c su·∫•t) kh√¥ng t·ªìn t·∫°i");
  }
  currentSnippet = snippets_tsa_math_probability;
  currentQuizSet = quiz_tsa_math_probability;
  break;


// ===============================
// TSA HUST ‚Äì T∆∞ duy ƒê·ªçc hi·ªÉu
// ===============================
case "tsa_reading_science":
  if (!snippets_tsa_reading_science || !quiz_tsa_reading_science) {
    throw new Error("D·ªØ li·ªáu TSA ‚Äì ƒê·ªçc hi·ªÉu (Khoa h·ªçc ‚Äì C√¥ng ngh·ªá) kh√¥ng t·ªìn t·∫°i");
  }
  currentSnippet = snippets_tsa_reading_science;
  currentQuizSet = quiz_tsa_reading_science;
  break;

case "tsa_reading_economy":
  if (!snippets_tsa_reading_economy || !quiz_tsa_reading_economy) {
    throw new Error("D·ªØ li·ªáu TSA ‚Äì ƒê·ªçc hi·ªÉu (Kinh t·∫ø ‚Äì X√£ h·ªôi) kh√¥ng t·ªìn t·∫°i");
  }
  currentSnippet = snippets_tsa_reading_economy;
  currentQuizSet = quiz_tsa_reading_economy;
  break;

case "tsa_reading_literature":
  if (!snippets_tsa_reading_literature || !quiz_tsa_reading_literature) {
    throw new Error("D·ªØ li·ªáu TSA ‚Äì ƒê·ªçc hi·ªÉu (VƒÉn h·ªçc ‚Äì B√°o ch√≠) kh√¥ng t·ªìn t·∫°i");
  }
  currentSnippet = snippets_tsa_reading_literature;
  currentQuizSet = quiz_tsa_reading_literature;
  break;


// ===============================
// TSA HUST ‚Äì T∆∞ duy Khoa h·ªçc / Gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ
// ===============================
case "tsa_science_graph":
  if (!snippets_tsa_science_graph || !quiz_tsa_science_graph) {
    throw new Error("D·ªØ li·ªáu TSA ‚Äì Khoa h·ªçc (ƒê·ªì th·ªã, b·∫£ng s·ªë li·ªáu) kh√¥ng t·ªìn t·∫°i");
  }
  currentSnippet = snippets_tsa_science_graph;
  currentQuizSet = quiz_tsa_science_graph;
  break;

case "tsa_science_experiment":
  if (!snippets_tsa_science_experiment || !quiz_tsa_science_experiment) {
    throw new Error("D·ªØ li·ªáu TSA ‚Äì Khoa h·ªçc (Nghi√™n c·ª©u & th√≠ nghi·ªám) kh√¥ng t·ªìn t·∫°i");
  }
  currentSnippet = snippets_tsa_science_experiment;
  currentQuizSet = quiz_tsa_science_experiment;
  break;

case "tsa_science_conflict":
  if (!snippets_tsa_science_conflict || !quiz_tsa_science_conflict) {
    throw new Error("D·ªØ li·ªáu TSA ‚Äì Khoa h·ªçc (Quan ƒëi·ªÉm xung ƒë·ªôt) kh√¥ng t·ªìn t·∫°i");
  }
  currentSnippet = snippets_tsa_science_conflict;
  currentQuizSet = quiz_tsa_science_conflict;
  break;

// ===============================
// HSA ‚Äì Math
// ===============================
case "hsa_math_algebra":
  if (!snippets_hsa_math_algebra || !quiz_hsa_math_algebra) {
    throw new Error("‚ùå D·ªØ li·ªáu HSA ‚Äì Math Algebra ch∆∞a t·ªìn t·∫°i");
  }
  currentSnippet = snippets_hsa_math_algebra;
  currentQuizSet = quiz_hsa_math_algebra;
  break;

case "hsa_math_calculus":
  if (!snippets_hsa_math_calculus || !quiz_hsa_math_calculus) {
    throw new Error("‚ùå D·ªØ li·ªáu HSA ‚Äì Math Calculus ch∆∞a t·ªìn t·∫°i");
  }
  currentSnippet = snippets_hsa_math_calculus;
  currentQuizSet = quiz_hsa_math_calculus;
  break;

case "hsa_math_geometry":
  if (!snippets_hsa_math_geometry || !quiz_hsa_math_geometry) {
    throw new Error("‚ùå D·ªØ li·ªáu HSA ‚Äì Math Geometry ch∆∞a t·ªìn t·∫°i");
  }
  currentSnippet = snippets_hsa_math_geometry;
  currentQuizSet = quiz_hsa_math_geometry;
  break;

case "hsa_math_probability":
  if (!snippets_hsa_math_probability || !quiz_hsa_math_probability) {
    throw new Error("‚ùå D·ªØ li·ªáu HSA ‚Äì Math Probability ch∆∞a t·ªìn t·∫°i");
  }
  currentSnippet = snippets_hsa_math_probability;
  currentQuizSet = quiz_hsa_math_probability;
  break;


// ===============================
// HSA ‚Äì Language
// ===============================
case "hsa_lang_reading":
  if (!snippets_hsa_lang_reading || !quiz_hsa_lang_reading) {
    throw new Error("‚ùå D·ªØ li·ªáu HSA ‚Äì Language Reading ch∆∞a t·ªìn t·∫°i");
  }
  currentSnippet = snippets_hsa_lang_reading;
  currentQuizSet = quiz_hsa_lang_reading;
  break;

case "hsa_lang_grammar":
  if (!snippets_hsa_lang_grammar || !quiz_hsa_lang_grammar) {
    throw new Error("‚ùå D·ªØ li·ªáu HSA ‚Äì Language Grammar ch∆∞a t·ªìn t·∫°i");
  }
  currentSnippet = snippets_hsa_lang_grammar;
  currentQuizSet = quiz_hsa_lang_grammar;
  break;

case "hsa_lang_literature":
  if (!snippets_hsa_lang_literature || !quiz_hsa_lang_literature) {
    throw new Error("‚ùå D·ªØ li·ªáu HSA ‚Äì Literature ch∆∞a t·ªìn t·∫°i");
  }
  currentSnippet = snippets_hsa_lang_literature;
  currentQuizSet = quiz_hsa_lang_literature;
  break;


// ===============================
// HSA ‚Äì Science
// ===============================
case "hsa_sci_physics":
  if (!snippets_hsa_sci_physics || !quiz_hsa_sci_physics) {
    throw new Error("‚ùå D·ªØ li·ªáu HSA ‚Äì Physics ch∆∞a t·ªìn t·∫°i");
  }
  currentSnippet = snippets_hsa_sci_physics;
  currentQuizSet = quiz_hsa_sci_physics;
  break;

case "hsa_sci_chemistry":
  if (!snippets_hsa_sci_chemistry || !quiz_hsa_sci_chemistry) {
    throw new Error("‚ùå D·ªØ li·ªáu HSA ‚Äì Chemistry ch∆∞a t·ªìn t·∫°i");
  }
  currentSnippet = snippets_hsa_sci_chemistry;
  currentQuizSet = quiz_hsa_sci_chemistry;
  break;

case "hsa_sci_biology":
  if (!snippets_hsa_sci_biology || !quiz_hsa_sci_biology) {
    throw new Error("‚ùå D·ªØ li·ªáu HSA ‚Äì Biology ch∆∞a t·ªìn t·∫°i");
  }
  currentSnippet = snippets_hsa_sci_biology;
  currentQuizSet = quiz_hsa_sci_biology;
  break;

case "hsa_sci_history":
  if (!snippets_hsa_sci_history || !quiz_hsa_sci_history) {
    throw new Error("‚ùå D·ªØ li·ªáu HSA ‚Äì History ch∆∞a t·ªìn t·∫°i");
  }
  currentSnippet = snippets_hsa_sci_history;
  currentQuizSet = quiz_hsa_sci_history;
  break;

case "hsa_sci_geography":
  if (!snippets_hsa_sci_geography || !quiz_hsa_sci_geography) {
    throw new Error("‚ùå D·ªØ li·ªáu HSA ‚Äì Geography ch∆∞a t·ªìn t·∫°i");
  }
  currentSnippet = snippets_hsa_sci_geography;
  currentQuizSet = quiz_hsa_sci_geography;
  break;


// ===============================
// HSA ‚Äì English
// ===============================
case "hsa_eng_vocab":
  if (!snippets_hsa_eng_vocab || !quiz_hsa_eng_vocab) {
    throw new Error("‚ùå D·ªØ li·ªáu HSA ‚Äì English Vocab ch∆∞a t·ªìn t·∫°i");
  }
  currentSnippet = snippets_hsa_eng_vocab;
  currentQuizSet = quiz_hsa_eng_vocab;
  break;

case "hsa_eng_reading":
  if (!snippets_hsa_eng_reading || !quiz_hsa_eng_reading) {
    throw new Error("‚ùå D·ªØ li·ªáu HSA ‚Äì English Reading ch∆∞a t·ªìn t·∫°i");
  }
  currentSnippet = snippets_hsa_eng_reading;
  currentQuizSet = quiz_hsa_eng_reading;
  break;

case "hsa_eng_inference":
  if (!snippets_hsa_eng_inference || !quiz_hsa_eng_inference) {
    throw new Error("‚ùå D·ªØ li·ªáu HSA ‚Äì English Inference ch∆∞a t·ªìn t·∫°i");
  }
  currentSnippet = snippets_hsa_eng_inference;
  currentQuizSet = quiz_hsa_eng_inference;
  break;


      case "sat_algebra":
        if (!snippets_sat_algebra || !quiz_sat_algebra) throw new Error("D·ªØ li·ªáu SAT Algebra kh√¥ng t·ªìn t·∫°i");
        currentSnippet = snippets_sat_algebra;
        currentQuizSet = quiz_sat_algebra;
        break;
      case "sat_advanced":
        if (!snippets_sat_advanced || !quiz_sat_advanced) throw new Error("D·ªØ li·ªáu SAT Advanced kh√¥ng t·ªìn t·∫°i");
        currentSnippet = snippets_sat_advanced;
        currentQuizSet = quiz_sat_advanced;
        break;
      case "sat_problem":
        if (!snippets_sat_problem || !quiz_sat_problem) throw new Error("D·ªØ li·ªáu SAT Problem kh√¥ng t·ªìn t·∫°i");
        currentSnippet = snippets_sat_problem;
        currentQuizSet = quiz_sat_problem;
        break;
      case "sat_geometry":
        if (!snippets_sat_geometry || !quiz_sat_geometry) throw new Error("D·ªØ li·ªáu SAT Geometry kh√¥ng t·ªìn t·∫°i");
        currentSnippet = snippets_sat_geometry;
        currentQuizSet = quiz_sat_geometry;
        break;
      case "tsa_logic":
        if (!snippets_tsa_logic || !quiz_tsa_logic) throw new Error("D·ªØ li·ªáu TSA Logic kh√¥ng t·ªìn t·∫°i");
        currentSnippet = snippets_tsa_logic;
        currentQuizSet = quiz_tsa_logic;
        break;
      case "tsa_math":
        if (!snippets_tsa_math || !quiz_tsa_math) throw new Error("D·ªØ li·ªáu TSA Math kh√¥ng t·ªìn t·∫°i");
        currentSnippet = snippets_tsa_math;
        currentQuizSet = quiz_tsa_math;
        break;
      case "tsa_reading":
        if (!snippets_tsa_reading || !quiz_tsa_reading) throw new Error("D·ªØ li·ªáu TSA Reading kh√¥ng t·ªìn t·∫°i");
        currentSnippet = snippets_tsa_reading;
        currentQuizSet = quiz_tsa_reading;
        break;
      case "tsa_problem":
        if (!snippets_tsa_problem || !quiz_tsa_problem) throw new Error("D·ªØ li·ªáu TSA Problem kh√¥ng t·ªìn t·∫°i");
        currentSnippet = snippets_tsa_problem;
        currentQuizSet = quiz_tsa_problem;
        break;
      case "hsa_logic":
        if (!snippets_hsa_logic || !quiz_hsa_logic) throw new Error("D·ªØ li·ªáu HSA Logic kh√¥ng t·ªìn t·∫°i");
        currentSnippet = snippets_hsa_logic;
        currentQuizSet = quiz_hsa_logic;
        break;
      case "hsa_math":
        if (!snippets_hsa_math || !quiz_hsa_math) throw new Error("D·ªØ li·ªáu HSA Math kh√¥ng t·ªìn t·∫°i");
        currentSnippet = snippets_hsa_math;
        currentQuizSet = quiz_hsa_math;
        break;
      case "hsa_reading":
        if (!snippets_hsa_reading || !quiz_hsa_reading) throw new Error("D·ªØ li·ªáu HSA Reading kh√¥ng t·ªìn t·∫°i");
        currentSnippet = snippets_hsa_reading;
        currentQuizSet = quiz_hsa_reading;
        break;
      case "hsa_problem":
        if (!snippets_hsa_problem || !quiz_hsa_problem) throw new Error("D·ªØ li·ªáu HSA Problem kh√¥ng t·ªìn t·∫°i");
        currentSnippet = snippets_hsa_problem;
        currentQuizSet = quiz_hsa_problem;
        break;
      default:
        currentSnippet = "<p>‚ùå Ch∆∞a ch·ªçn n·ªôi dung.</p>";
        currentQuizSet = [];
    }
    box.classList.remove("show");
    setTimeout(() => {
      box.innerHTML = currentSnippet;
      box.classList.add("show");
      if (window.MathJax) MathJax.typesetPromise([box]);
    }, 50);
    if (currentQuizSet.length > 0) {
      document.getElementById("quizBox").classList.remove("show");
      setTimeout(() => {
        document.getElementById("quizBox").style.display = "block";
        document.getElementById("quizBox").classList.add("show");
        loadQuiz();
        updateStats();
      }, 50);
    } else {
      document.getElementById("quizBox").style.display = "none";
    }
    saveQuizState();
  } catch (e) {
    console.error(e);
    box.innerHTML = `<p>‚ùå L·ªói: ${e.message}</p>`;
    document.getElementById("quizBox").style.display = "none";
  }
}

// Load c√¢u h·ªèi quiz
function loadQuiz() {
  if (currentQuizSet.length === 0) return;
  const quizBox = document.getElementById("quizBox");
  quizBox.classList.remove("show");
  setTimeout(() => {
    const q = currentQuizSet[currentQuiz];
    document.getElementById("quizQuestion").innerHTML = `<strong>C√¢u ${currentQuiz + 1}/${currentQuizSet.length}</strong>: ${q.question}`;
    document.getElementById("quizOptions").innerHTML = q.options
      .map(opt => `
        <li>
          <label>
            <input type="radio" name="quizOption" value="${opt}" aria-label="ƒê√°p √°n: ${opt}">
            <span>${opt}</span>
          </label>
        </li>
      `).join("");
    document.getElementById("quizResult").innerText = "";
    quizBox.classList.add("show");
    if (window.MathJax) {
  MathJax.typesetPromise([
    document.getElementById("quizQuestion"),
    document.getElementById("quizOptions")
  ]);
}

  }, 50);
}

// Ki·ªÉm tra ƒë√°p √°n
function checkAnswer() {
  if (currentQuizSet.length === 0) return;
  const options = document.getElementsByName("quizOption");
  let selected = null;
  for (let opt of options) {
    if (opt.checked) {
      selected = opt.value;
      break;
    }
  }
  if (!selected) {
    alert("H√£y ch·ªçn m·ªôt ƒë√°p √°n!");
    return;
  }
  answeredCount++;
  const currentQ = currentQuizSet[currentQuiz];
  const correctAns = currentQ.answer;
  if (selected === correctAns) {
    correctCount++;
    document.getElementById("quizResult").innerHTML =
      "‚úÖ Ch√≠nh x√°c!<br>" + currentQ.explanation;
    document.getElementById("quizResult").style.color = "green";
    playSound("correct");
  } else {
    document.getElementById("quizResult").innerHTML =
      "‚ùå Sai r·ªìi. ƒê√°p √°n ƒë√∫ng: " + correctAns + "<br>" + currentQ.explanation;
    document.getElementById("quizResult").style.color = "red";
    playSound("wrong");
  }
  const labels = document.querySelectorAll("#quizOptions label");
  labels.forEach(label => {
    const text = label.textContent.trim();
    label.classList.remove("correct", "wrong");
    if (text === correctAns.trim()) label.classList.add("correct");
    if (text === selected.trim() && selected !== correctAns) label.classList.add("wrong");
    const radios = document.querySelectorAll("input[name='quizOption']");
    radios.forEach(r => r.disabled = true);
  });
  updateStats();
  saveQuizState();
  if (window.MathJax) MathJax.typesetPromise();
}

// Ch·ªçn c√¢u ti·∫øp theo
function nextQuestion() {
  if (currentQuizSet.length === 0) return;
  if (!document.querySelector("input[name='quizOption']:checked")) {
    alert("Vui l√≤ng tr·∫£ l·ªùi c√¢u h·ªèi tr∆∞·ªõc khi chuy·ªÉn ti·∫øp!");
    return;
  }
  currentQuiz++;
  if (currentQuiz >= currentQuizSet.length) {
    alert("üéâ B·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ c√¢u h·ªèi!");
    currentQuiz = 0;
  }
  loadQuiz();
  saveQuizState();
}

// Quay l·∫°i c√¢u tr∆∞·ªõc
function prevQuestion() {
  if (currentQuizSet.length === 0) return;
  if (currentQuiz > 0) {
    currentQuiz--;
    loadQuiz();
    saveQuizState();
  }
}

// C·∫≠p nh·∫≠t th·ªëng k√™
function updateStats() {
  const total = currentQuizSet.length;
  const progress = total > 0 ? Math.round((answeredCount / total) * 100) : 0;
  document.getElementById("quizStats").innerHTML = `
    <div class="progress-bar">
      <div class="progress" style="width:${progress}%;"></div>
    </div>
    <p>K·∫øt qu·∫£: <b>${correctCount}</b>/<b>${answeredCount}</b> (T·ªïng s·ªë c√¢u: ${total})</p>
  `;
  localStorage.setItem("quizStats", JSON.stringify({ correctCount, answeredCount }));
}

// L∆∞u v√† t·∫£i tr·∫°ng th√°i quiz
function saveQuizState() {
  localStorage.setItem("quizState", JSON.stringify({
    currentQuiz,
    correctCount,
    answeredCount,
    currentSnippet
  }));
}

function loadQuizState() {
  const state = JSON.parse(localStorage.getItem("quizState"));
  if (state) {
    currentQuiz = state.currentQuiz || 0;
    correctCount = state.correctCount || 0;
    answeredCount = state.answeredCount || 0;
    if (state.currentSnippet) showSnippet(state.currentSnippet);
  }
}

// √Çm thanh
function playSound(type) {
  if (type === "correct") {
    const audio = document.getElementById("soundCorrect");
    if (audio) audio.play();
  } else if (type === "wrong") {
    const audio = document.getElementById("soundWrong");
    if (audio) audio.play();
  }
}
// X·ª≠ l√Ω m·ªü popup Donate
function openDonate() {
  const popup = document.getElementById("donatePopup");
  if (popup) popup.style.display = "flex"; // ho·∫∑c "block" n·∫øu kh√¥ng d√πng flex
}

// X·ª≠ l√Ω ƒë√≥ng popup Donate
function closeDonate() {
  const popup = document.getElementById("donatePopup");
  if (popup) popup.style.display = "none";
}

// ƒê√≥ng popup khi b·∫•m ra ngo√†i
window.addEventListener("click", function (e) {
  const popup = document.getElementById("donatePopup");
  if (e.target === popup) {
    popup.style.display = "none";
  }
});

// ==========================
// AUTO QUOTE ENGINE
// ==========================
document.addEventListener("DOMContentLoaded", () => {
  const quoteBox = document.getElementById("randomQuote");
  if (!quoteBox) return;

    const quotes = [
      "üìñ H·ªçc, h·ªçc n·ªØa, h·ªçc m√£i ‚Äì V.I. Lenin",
      "üí° Ki·∫øn th·ª©c l√† s·ª©c m·∫°nh ‚Äì Francis Bacon",
      "üöÄ M·ªói ng√†y m·ªôt ch√∫t, b·∫°n s·∫Ω ƒëi r·∫•t xa",
      "üî• Kh√¥ng c√≥ √°p l·ª±c, kh√¥ng c√≥ kim c∆∞∆°ng",
      "üå± H·ªçc t·∫≠p l√† h·∫°t gi·ªëng cho th√†nh c√¥ng",
      "üéØ K·ª∑ lu·∫≠t l√† c√¢y c·∫ßu n·ªëi gi·ªØa m·ª•c ti√™u v√† th√†nh t·ª±u ‚Äì Jim Rohn",
      "üåü Th·∫•t b·∫°i l√† m·∫π c·ªßa th√†nh c√¥ng",
      "üìö ƒê·ªçc m·ªôt cu·ªën s√°ch t·ªët b·∫±ng tr√≤ chuy·ªán v·ªõi m·ªôt ng∆∞·ªùi vƒ© ƒë·∫°i ‚Äì Descartes",
      "üí≠ H·ªçc m√† kh√¥ng suy nghƒ© th√¨ u·ªïng ph√≠, suy nghƒ© m√† kh√¥ng h·ªçc th√¨ nguy hi·ªÉm ‚Äì Kh·ªïng T·ª≠",
      "‚ö° Th√†nh c√¥ng l√† t·ªïng c·ªông c·ªßa nh·ªØng n·ªó l·ª±c nh·ªè ƒë∆∞·ª£c l·∫∑p ƒëi l·∫∑p l·∫°i h√†ng ng√†y",
      "‚ú® Ng∆∞·ªùi bi·∫øt ƒë·ªçc nh∆∞ng kh√¥ng ƒë·ªçc c≈©ng ch·∫≥ng h∆°n ng∆∞·ªùi m√π ch·ªØ ‚Äì Mark Twain",
      "üåà T∆∞∆°ng lai thu·ªôc v·ªÅ nh·ªØng ai tin v√†o v·∫ª ƒë·∫πp c·ªßa gi·∫•c m∆° ‚Äì Eleanor Roosevelt",
      "üï∞Ô∏è ƒê·ª´ng ƒë·ª£i. Th·ªùi gian s·∫Ω kh√¥ng bao gi·ªù ‚Äòƒë√∫ng l√∫c‚Äô ‚Äì Napoleon Hill",
      "üéì Gi√°o d·ª•c l√† v≈© kh√≠ m·∫°nh nh·∫•t b·∫°n c√≥ th·ªÉ d√πng ƒë·ªÉ thay ƒë·ªïi th·∫ø gi·ªõi ‚Äì Nelson Mandela",
      "üåç Ng∆∞·ªùi h·ªçc su·ªët ƒë·ªùi l√† ng∆∞·ªùi ch∆∞a bao gi·ªù ng·ª´ng l·ªõn l√™n",
      "üìù Vi·∫øt l√† c√°ch t·ªët nh·∫•t ƒë·ªÉ h·ªçc g·∫•p ƒë√¥i ‚Äì Seneca",
      "üß† Tr√≠ tu·ªá ƒë·∫øn t·ª´ kinh nghi·ªám. Kinh nghi·ªám th∆∞·ªùng ƒë·∫øn t·ª´ sai l·∫ßm",
      "üîë Ch√¨a kh√≥a c·ªßa th√†nh c√¥ng l√† t·∫≠p trung v√†o m·ª•c ti√™u, kh√¥ng ph·∫£i ch∆∞·ªõng ng·∫°i",
      "üïäÔ∏è Tri th·ª©c l√† t·ª± do",
      "üî• N·∫øu b·∫°n c√≥ gi·∫•c m∆°, h√£y n·∫Øm l·∫•y n√≥ v√† kh√¥ng bao gi·ªù bu√¥ng ‚Äì Carol Burnett"
    ];

  let quoteIndex = 0;

  function cycleQuote() {
    quoteIndex = (quoteIndex + 1) % quotes.length;
    quoteBox.classList.remove("fade-in");
    void quoteBox.offsetWidth; // reset animation
    quoteBox.textContent = quotes[quoteIndex];
    quoteBox.classList.add("fade-in");
  }

  setInterval(cycleQuote, 4000);
});


document.addEventListener("DOMContentLoaded", () => {
  // Accordion
  const parents = document.querySelectorAll(".parent-card");
  parents.forEach(card => {
    const header = card.querySelector(".card-header");
    header.addEventListener("click", () => {
      card.classList.toggle("active");
    });
  });
});

function openDonate() {
  document.getElementById("donateModal").style.display = "block";
}
function closeDonate() {
  document.getElementById("donateModal").style.display = "none";
}

// ===============================
// Tab switcher (SAT / TSA / HSA Structure)
// ===============================
document.addEventListener("DOMContentLoaded", () => {
  const tabButtons = document.querySelectorAll(".tab-btn");

  tabButtons.forEach(btn => {
    btn.addEventListener("click", () => {
      const targetId = btn.getAttribute("data-target");
      const parentSection = btn.closest("section"); // t√¨m section ch·ª©a tab

      // ·∫®n t·∫•t c·∫£ panel trong section ƒë√≥
      parentSection.querySelectorAll(".tab-panel").forEach(panel => {
        panel.hidden = true;
      });

      // B·ªè active ·ªü t·∫•t c·∫£ n√∫t trong section
      parentSection.querySelectorAll(".tab-btn").forEach(b => {
        b.classList.remove("active");
        b.setAttribute("aria-selected", "false");
      });

      // Hi·ªán panel ƒë∆∞·ª£c ch·ªçn
      const targetPanel = parentSection.querySelector(targetId);
      if (targetPanel) targetPanel.hidden = false;

      // Active n√∫t
      btn.classList.add("active");
      btn.setAttribute("aria-selected", "true");
    });
  });
});
